}
inipars=c(k1=0.5,k2=0.05,alpha21=0.5,alpha12=0.1,gamma=0.5)
eCO2fit=modFit(f=eCO2cost,p=inipars,method="Nelder-Mead",
upper=c(Inf,Inf,1,1,1),lower=c(0,0,0,0,0))
eCO2fit$par
#Run the model again with best parameter set
fitmod=TwopFeedbackModel(t=days, ks=eCO2fit$par[1:2],
a21=eCO2fit$par[3]*eCO2fit$par[1],
a12=eCO2fit$par[4]*eCO2fit$par[2],
C0=Ctotal*c(eCO2fit$par[5],1-eCO2fit$par[5]),
In=0)
fitCum=getAccumulatedRelease(fitmod)
#Plot the results
plot(CO2flux[,1:2],type="p",xlab="Days",
ylab="Cummulative respiration (mg C g-1 soil)", ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
lines(rowSums(fitCum))
CO2flux=data.frame(
time=c(1,3,8,30,37),
cummCO2=c(0.10, 0.30, 0.50, 2.24, 2.50), Stderr=c(0.1,0.2,0.3,0.4,0.7))
Ctotal=45.4 #C concentration in soil sample (mg C g-1 soil)
CO2flux
plot(CO2flux[,1:2],type="p",xlab="Days",ylab="Cummulative respiration (mg C g-1 soil)",  ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
days=seq(0,37) #Incubation days
eCO2func=function(pars){
mod=TwopFeedbackModel(
t=days,
ks=pars[1:2],
a21=pars[3]*pars[1],
a12=pars[4]*pars[2],
C0=Ctotal*c(pars[5],1-pars[5]),
In=0,
pass=TRUE
)
AccR=getAccumulatedRelease(mod)
return(data.frame(time=days,cummCO2=rowSums(AccR)))
}
eCO2cost=function(pars){
modelOutput=eCO2func(pars)
return(modCost(model=modelOutput, obs=CO2flux, err="Stderr"))
}
inipars=c(k1=0.5,k2=0.05,alpha21=0.5,alpha12=0.1,gamma=0.5)
eCO2fit=modFit(f=eCO2cost,p=inipars,method="Nelder-Mead",
upper=c(Inf,Inf,1,1,1),lower=c(0,0,0,0,0))
eCO2fit$par
#Run the model again with best parameter set
fitmod=TwopFeedbackModel(t=days, ks=eCO2fit$par[1:2],
a21=eCO2fit$par[3]*eCO2fit$par[1],
a12=eCO2fit$par[4]*eCO2fit$par[2],
C0=Ctotal*c(eCO2fit$par[5],1-eCO2fit$par[5]),
In=0)
fitCum=getAccumulatedRelease(fitmod)
#Plot the results
plot(CO2flux[,1:2],type="p",xlab="Days",
ylab="Cummulative respiration (mg C g-1 soil)", ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
lines(rowSums(fitCum))
rm(list=ls()) #empties the workspace
library(SoilR)
library(FME)
vignette("FME")
CO2flux=data.frame(
time=c(1,3,8,30,37),
cummCO2=c(0.10, 0.30, 0.50, 2.24, 2.50), Stderr=c(0.1,0.2,0.3,0.4,0.7))
Ctotal=45.4 #C concentration in soil sample (mg C g-1 soil)
CO2flux
View(CO2flux)
plot(CO2flux[,1:2],type="p",xlab="Days",ylab="Cummulative respiration (mg C g-1 soil)",  ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
days=seq(0,37) #Incubation days
eCO2func=function(pars){
mod=TwopFeedbackModel(
t=days,
ks=pars[1:2],
a21=pars[3]*pars[1],
a12=pars[4]*pars[2],
C0=Ctotal*c(pars[5],1-pars[5]),
In=0,
pass=TRUE
)
AccR=getAccumulatedRelease(mod)
return(data.frame(time=days,cummCO2=rowSums(AccR)))
}
eCO2cost=function(pars){
modelOutput=eCO2func(pars)
return(modCost(model=modelOutput, obs=CO2flux, err="Stderr"))
}
inipars=c(k1=0.5,k2=0.05,alpha21=0.5,alpha12=0.1,gamma=0.5)
View(CO2flux)
rm(list=ls()) #empties the workspace
library(SoilR)
library(FME)
vignette("FME")
CO2flux=data.frame(
time=c(1,3,8,30,37),
cummCO2=c(0.10, 0.30, 0.50, 2.24, 2.50), Stderr=c(0.1,0.2,0.3,0.4,0.7))
Ctotal=45.4 #C concentration in soil sample (mg C g-1 soil)
CO2flux
plot(CO2flux[,1:2],type="p",xlab="Days",ylab="Cummulative respiration (mg C g-1 soil)",  ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
days=seq(0,37) #Incubation days
eCO2func=function(pars){
mod=TwopFeedbackModel(
t=days,
ks=pars[1:2],
a21=pars[3]*pars[1],
a12=pars[4]*pars[2],
C0=Ctotal*c(pars[5],1-pars[5]),
In=0,
pass=TRUE
)
AccR=getAccumulatedRelease(mod)
return(data.frame(time=days,cummCO2=rowSums(AccR)))
}
eCO2cost=function(pars){
modelOutput=eCO2func(pars)
return(modCost(model=modelOutput, obs=CO2flux, err="Stderr"))
}
inipars=c(k1=0.5,k2=0.05,alpha21=0.5,alpha12=0.1,gamma=0.5)
eCO2fit=modFit(f=eCO2cost,p=inipars,method="Nelder-Mead",
upper=c(Inf,Inf,1,1,1),lower=c(0,0,0,0,0))
eCO2fit$par
#Run the model again with best parameter set
fitmod=TwopFeedbackModel(t=days, ks=eCO2fit$par[1:2],
a21=eCO2fit$par[3]*eCO2fit$par[1],
a12=eCO2fit$par[4]*eCO2fit$par[2],
C0=Ctotal*c(eCO2fit$par[5],1-eCO2fit$par[5]),
In=0)
fitCum=getAccumulatedRelease(fitmod)
#Plot the results
plot(CO2flux[,1:2],type="p",xlab="Days",
ylab="Cummulative respiration (mg C g-1 soil)", ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
lines(rowSums(fitCum))
?mosfit
?modfit
?modFit
eCO2fit=modFit(f=eCO2cost,p=inipars,method="Nelder-Mead",
upper=c(Inf,Inf,inf,inf,inf),lower=c(0,0,0,0,0))
eCO2fit=modFit(f=eCO2cost,p=inipars,method="Nelder-Mead",
upper=c(Inf,Inf,Inf,Inf,Inf),lower=c(0,0,0,0,0))
eCO2fit$par
#Run the model again with best parameter set
fitmod=TwopFeedbackModel(t=days, ks=eCO2fit$par[1:2],
a21=eCO2fit$par[3]*eCO2fit$par[1],
a12=eCO2fit$par[4]*eCO2fit$par[2],
C0=Ctotal*c(eCO2fit$par[5],1-eCO2fit$par[5]),
In=0)
fitCum=getAccumulatedRelease(fitmod)
#Plot the results
plot(CO2flux[,1:2],type="p",xlab="Days",
ylab="Cummulative respiration (mg C g-1 soil)", ylim=c(0,4))
arrows(CO2flux[,1],CO2flux[,2]-CO2flux[,3],CO2flux[,1],CO2flux[,2]+
CO2flux[,3],angle=90, length=0.1,code=3)
lines(rowSums(fitCum))
?modFit
vignette("FME")
install.packages("dream", repos="http://R-Forge.R-project.org")
libraly(dream)
library(dream)
vignette("dream")
vignette("DREAM")
help("dreamCalibrate")
return(data.frame(time=days,cummCO2=rowSums(AccR)))
help("dream")
help("dream")
demo(example1)
install.packages("SoilR")
install.packages("SoilR")
install.packages("SoilR")
library(SoilR)
install.packages("rvest")
install.packages("plotrix")
url_cmc <- "https://coinmarketcap.com/currencies/views/all/"
library(rvest) # library() command loads <rvest>, a package to read web data
library(plotrix) # plotting utility
library(dplyr) # package for data manipulation
url_cmc %>%
read_html() %>%
html_nodes(css = "table") %>%
html_table() %>%
as.data.frame() -> "tbl_cmc"
head(tbl_cmc)
tbl_cmc[] <- lapply(tbl_cmc, gsub, pattern = "\\\n|\\s|[%*$,?]", replacement = "")
tbl_cmc$X. <- NULL
names(tbl_cmc) <- c("name", "symb", "mcap", "price", "supply", "vol", "ch1h", "ch24h", "ch7d")
head(tbl_cmc)
num_tbl_cmc <- lapply(tbl_cmc[-c(1:2)], as.numeric) %>%
as.data.frame()
num_tbl_cmc <- lapply(tbl_cmc[-c(1:2)], as.numeric) %>%
as.data.frame()
tbl_clean <- cbind(tbl_cmc$name, tbl_cmc$symb, num_tbl_cmc)
names(tbl_clean) <- c("name", "symb", "mcap", "price", "supply", "vol", "ch1h", "ch24h", "ch7d")
typeof(tbl_clean$mcap)
top_100_mcap <- arrange(.data = tbl_clean, desc(mcap))[1:100, ]
top_100_mcap$mcap_prcnt <- top_100_mcap$mcap/sum(top_100_mcap$mcap)
top_20_mcap <- arrange(.data = top_100_mcap, desc(mcap))[1:20, ]
lbls <- paste0(top_20_mcap$symb, " : ", sprintf("%.2f", top_20_mcap$mcap_prcnt*100), "%")
pie3D(top_20_mcap$mcap_prcnt, labels = lbls,
explode=0.1, main="Top 20 cryptocoin market share")
perf <- arrange(.data = top_100_mcap, desc(ch1h), desc(ch24h), desc(ch7d))
head(perf, 10) # Display first 10 rows.
install.packages("jsonlite")
install.packages("forecast")
library(jsonlite)
library(ggplot2)
library(forecast)
cc <- fromJSON("https://min-api.cryptocompare.com/")
str(cc)
cc$AvailableCalls$Price$HistoDay$Info$Examples
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
cc_histoday_btc <- fromJSON("https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&allData=true&e=CCCAGG")
btc_ts <- ts(cc_histoday_btc$Data$close, start = cc_histoday_btc$Data$time[1])
fit_arima <- auto.arima(btc_ts)
autoplot(forecast(fit_arima, 50))
accuracy(fit_arima)
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("forecast")) install.packages("forecast")
if (!require("plotrix")) install.packages("plotrix")
if(!file.exists("trade_history.csv")){
trade_history <- data.frame(type=factor(levels = c("deposit", "wtihdraw", "exchange")),
deposit_amount=double(),
deposit_currency=factor(),
withdraw_amount=double(),
withdraw_currency=factor(),
exchange_name=character(),
remark=character(),
date=character(), # year-month-day format eg 2017-07-18
stringsAsFactors=FALSE)
write.csv(x = trade_history, file = "trade_history.csv", sep = ",", row.names = FALSE)
}
trade_history <- read.csv(file = "trade_history.csv", header = TRUE, sep = ",")
head(trade_history)
add_trade <- function(type, deposit_amount = 0, deposit_currency = NA,
withdraw_amount = 0, withdraw_currency = NA, exchange_name = NA,
remark = NA, date = NA) {
new_trade <- data.frame(type, deposit_amount, deposit_currency,
withdraw_amount, withdraw_currency, exchange_name, remark, date)
read.csv(file = "trade_history.csv", header = TRUE, sep = ",") %>%
rbind(new_trade) -> "trade_history"
write.csv(x = trade_history, file = "trade_history.csv", sep = ",", row.names = FALSE)
assign(x = "trade_history", trade_history, envir = globalenv())
}
add_trade(type = "deposit", deposit_amount = 0.2, deposit_currency = "BTC", remark = "gift from brother", date = "2017-07-01")
add_trade(type = "deposit", deposit_amount = 5, deposit_currency = "XMR", remark = "purchased", exchange_name = "poloniex", date = "2017-07-02")
add_trade(type = "deposit", deposit_amount = 1, deposit_currency = "ETH", remark = "mining reward", date = "2017-07-05")
add_trade(type = "deposit", deposit_amount = 200, deposit_currency = "STEEM", remark = "Steemit rewarrd", date = "2017-07-06")
add_trade(type = "trade", deposit_amount = 1.1, deposit_currency = "ZEC", withdraw_amount = 0.1, withdraw_currency = "BTC", remark = "Exchanged BTC for ZEC", date = "2017-07-09")
add_trade(type = "trade", deposit_amount = 4.6, deposit_currency = "ETC",  withdraw_amount = 2, withdraw_currency = "XMR", remark = "Exchanged XMR ETC", date = "2017-07-10")
add_trade(type = "trade", deposit_amount = 65, deposit_currency = "EOS",  withdraw_amount = 0.5, withdraw_currency = "ETH", date = "2017-07-14")
add_trade(type = "withdraw", withdraw_amount = 0.5, withdraw_currency = "XMR", remark = "lost wallet key")
portfolio <- function() {
deposit <- aggregate(trade_history[c("deposit_amount")],
by = trade_history[c("deposit_currency")], FUN=sum)
names(deposit) <- c("currency", "deposit_amount")
withdraw <- aggregate(trade_history[c("withdraw_amount")],
by = trade_history[c("withdraw_currency")], FUN=sum)
names(withdraw) <- c("currency", "withdraw_amount")
portfolio <- full_join(x = deposit, y = withdraw, by = "currency")
portfolio[is.na(portfolio)] <- 0
portfolio$available <- portfolio$deposit_amount - portfolio$withdraw_amount
assign(x = "portfolio", portfolio, envir = globalenv())
print(portfolio)
}
portfolio()
portfolio_value <- function(priced_in) {
for(i in 1:nrow(portfolio)) {
url <- paste0("https://min-api.cryptocompare.com/data/price?fsym=", portfolio[i, 1], "&tsyms=", priced_in, collapse = "")
unit_price <- fromJSON(url)[[1]]
portfolio$value[i] <- unit_price * portfolio$available[i]
}
assign(x = "portfolio_value", portfolio, envir = globalenv())
print(portfolio_value)
print(paste("Total portfolio value in", priced_in, sum(portfolio_value$value)))
lbls <- paste0(portfolio$currency, " : ", # Create labels for plot
sprintf("%.2f", (portfolio$value / sum (portfolio$value))*100), "%")
pie3D(portfolio$value, labels = lbls,
explode=0.1, main="Portfolio value")
}
portfolio_value("CNY")
predict_currency <- function(currency, priced_in, period) {
url <- paste0("https://min-api.cryptocompare.com/data/histoday?fsym=", currency, "&tsym=", priced_in, "&allData=true", collapse = "")
histoday <- fromJSON(url)
ts <- ts(histoday$Data$close, start = histoday$Data$time[1])
fit_arima <- auto.arima(ts)
autoplot(forecast(fit_arima, period))
}
predict_currency("BTC", "USD", 30)
predict_currency("BTC", "USD", 30)
predict_currency("ETH", "USD", 30)
autoplot(forecast(fit_arima, 50))
accuracy(fit_arima)
predict_currency("ETH", "USD", 30)
predict_currency("XLM", "USD", 30)
predict_currency("MTL", "USD", 30)
UpdateR()
updateR()
library(installr)
updateR()
update.packages(ask = FALSE)
install.packages("rmarkdown")
install.packages("rmarkdown")
rnorm2 <- function(n,mean,sd) { mean+sd*scale(rnorm(n)) }
r <- rnorm2(100,4,1)
mean(r)  ## 4
sd(r)    ## 1
r
r <- rnorm2(10,4,1)
mean(r)  ## 4
sd(r)    ## 1
r
r <- rnorm2(10,0.11,0.03)
mean(r)  ## 4
sd(r)    ## 1
r
r <- rnorm2(10,0.11*27,0.03*27)
mean(r)  ## 4
sd(r)    ## 1
r
r <- rnorm2(3,0.11*27,0.03*27)
mean(r)  ## 4
sd(r)    ## 1
r
5*5
0.11*25
r <- rnorm2(3,0.11*25,0.03*25)
mean(r)  ## 4
sd(r)    ## 1
r
2.1/25
3.6/25
r <- rnorm2(3,0.14*25,0.02*25)
mean(r)  ## 4
sd(r)    ## 1
r
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('slidifyLibraries', 'ramnathv')
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
setwd("Z:/data/Pres")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidifyLibraries)
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish('Mavbegg','Pres')
publish('Mavbegg','Pres')
"dependencies": {
"express": ">=3.11.0"
}
publish('Pres','Mavbegg')
install.packages(c("ade4", "ape", "AppliedPredictiveModeling", "backports", "BayesianTools", "BH", "bridgesampling", "Brobdingnag", "broom", "callr", "car", "carData", "caret", "caTools", "checkmate", "ChemoSpec", "citr", "classInt", "cli", "coda", "colorspace", "CORElearn", "covr", "cramer", "Cubist", "curl", "CVST", "data.table", "dbplyr", "ddalpha", "DescTools", "deSolve", "devtools", "DHARMa", "digest", "dimRed", "doParallel", "dplyr", "e1071", "elasticnet", "emulator", "evaluate", "expm", "forecast", "Formula", "FSA", "gam", "gap", "ggmap", "ggmcmc", "ggplot2", "git2r", "glue", "gplots", "gtools", "haven", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "IDPmisc", "igraph", "inline", "installr", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "labelled", "lava", "leaflet", "lme4", "lmtest", "lubridate", "manipulateWidget", "mapproj", "maps", "maptools", "markdown", "MASS", "matrixStats", "measurements", "mime", "miniUI", "ModelMetrics", "modeltools", "munsell", "mvtnorm", "nloptr", "openssl", "ordinal", "party", "pillar", "pkgbuild", "pkgconfig", "pkgload", "plotmo", "plotrix", "pls", "pROC", "processx", "prodlim", "progress", "proxy", "psych", "purrr", "qrnn", "quantmod", "quantreg", "questionr", "R.oo", "R.utils", "R6", "RANN", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readr", "readxl", "recipes", "reprex", "reshape", "rgeos", "RgoogleMaps", "rio", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstan", "rstudioapi", "RUnit", "RVAideMemoire", "sandwich", "scales", "sfsmisc", "shiny", "sourcetools", "sp", "StanHeaders", "stringi", "stringr", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TTR", "utf8", "vegan", "WRS2", "xtable", "xts", "yaml", "zoo"))
install.packages(c("ade4", "ape", "AppliedPredictiveModeling", "backports", "BayesianTools", "BH", "bridgesampling", "Brobdingnag", "broom", "callr", "car", "carData", "caret", "caTools", "checkmate", "ChemoSpec", "citr", "classInt", "cli", "coda", "colorspace", "CORElearn", "covr", "cramer", "Cubist", "curl", "CVST", "data.table", "dbplyr", "ddalpha", "DescTools", "deSolve", "devtools", "DHARMa", "digest", "dimRed", "doParallel", "dplyr", "e1071", "elasticnet", "emulator", "evaluate", "expm", "forecast", "Formula", "FSA", "gam", "gap", "ggmap", "ggmcmc", "ggplot2", "git2r", "glue", "gplots", "gtools", "haven", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "IDPmisc", "igraph", "inline", "installr", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "labelled", "lava", "leaflet", "lme4", "lmtest", "lubridate", "manipulateWidget", "mapproj", "maps", "maptools", "markdown", "MASS", "matrixStats", "measurements", "mime", "miniUI", "ModelMetrics", "modeltools", "munsell", "mvtnorm", "nloptr", "openssl", "ordinal", "party", "pillar", "pkgbuild", "pkgconfig", "pkgload", "plotmo", "plotrix", "pls", "pROC", "processx", "prodlim", "progress", "proxy", "psych", "purrr", "qrnn", "quantmod", "quantreg", "questionr", "R.oo", "R.utils", "R6", "RANN", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readr", "readxl", "recipes", "reprex", "reshape", "rgeos", "RgoogleMaps", "rio", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstan", "rstudioapi", "RUnit", "RVAideMemoire", "sandwich", "scales", "sfsmisc", "shiny", "sourcetools", "sp", "StanHeaders", "stringi", "stringr", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TTR", "utf8", "vegan", "WRS2", "xtable", "xts", "yaml", "zoo"))
install.packages(c("ade4", "ape", "AppliedPredictiveModeling", "backports", "BayesianTools", "BH", "bridgesampling", "Brobdingnag", "broom", "callr", "car", "carData", "caret", "caTools", "checkmate", "ChemoSpec", "citr", "classInt", "cli", "coda", "colorspace", "CORElearn", "covr", "cramer", "Cubist", "curl", "CVST", "data.table", "dbplyr", "ddalpha", "DescTools", "deSolve", "devtools", "DHARMa", "digest", "dimRed", "doParallel", "dplyr", "e1071", "elasticnet", "emulator", "evaluate", "expm", "forecast", "Formula", "FSA", "gam", "gap", "ggmap", "ggmcmc", "ggplot2", "git2r", "glue", "gplots", "gtools", "haven", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "IDPmisc", "igraph", "inline", "installr", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "labelled", "lava", "leaflet", "lme4", "lmtest", "lubridate", "manipulateWidget", "mapproj", "maps", "maptools", "markdown", "MASS", "matrixStats", "measurements", "mime", "miniUI", "ModelMetrics", "modeltools", "munsell", "mvtnorm", "nloptr", "openssl", "ordinal", "party", "pillar", "pkgbuild", "pkgconfig", "pkgload", "plotmo", "plotrix", "pls", "pROC", "processx", "prodlim", "progress", "proxy", "psych", "purrr", "qrnn", "quantmod", "quantreg", "questionr", "R.oo", "R.utils", "R6", "RANN", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readr", "readxl", "recipes", "reprex", "reshape", "rgeos", "RgoogleMaps", "rio", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstan", "rstudioapi", "RUnit", "RVAideMemoire", "sandwich", "scales", "sfsmisc", "shiny", "sourcetools", "sp", "StanHeaders", "stringi", "stringr", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tseries", "TTR", "utf8", "vegan", "WRS2", "xtable", "xts", "yaml", "zoo"))
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
library(installr)
updateR()
library(installr)
install.packages("stringr")
updateR()
library(installr)
updateR()
updateR()
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish('Pres','Mavbegg')
slidify("index.Rmd")
